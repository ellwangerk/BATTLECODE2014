 package JinPlayer;

import battlecode.common.*;

import java.util.Random;

public class RobotPlayer{
	
	public static RobotController rc;
	static Direction[] allDirections = {Direction.NORTH, Direction.NORTH_EAST, Direction.EAST, Direction.SOUTH_EAST, Direction.SOUTH, Direction.SOUTH_WEST, Direction.WEST, Direction.NORTH_WEST};
	static Random randall = new Random();
	static int directionalLooks[] = new int[]{0,1,-1,2,-2};
	static boolean spawn = true;
	
	public static void run(RobotController rcin){
		rc = rcin;
		randall.setSeed(rc.getRobot().getID());
		while(true){
			try{
				if(rc.getType()==RobotType.HQ){//if I'm a headquarters
					runHeadquarters();
				}else if(rc.getType()==RobotType.SOLDIER){//if i'm a soldier
					runSoldier();
				} 
				rc.yield();
			}catch (Exception e){
				e.printStackTrace();
			}
		}
	}

	private static void runSoldier() throws GameActionException {
		tryToShoot();
		buildPASTR();
		
		//communication
		//rc.setIndicatorString(0, "read ID: "+rc.readBroadcast(0));
		int editingChannel = (Clock.getRoundNum()%2);
		int usingChannel = ((Clock.getRoundNum()+1)%2);
		
		int runningTotal = rc.readBroadcast(editingChannel);
		rc.broadcast(editingChannel, runningTotal+1);
		
		MapLocation runningVectorTotal = intToLoc(rc.readBroadcast(editingChannel+2));
		rc.broadcast(editingChannel+2,locToInt(mladd(runningVectorTotal,rc.getLocation())));
		MapLocation averagePositionOfSwarm = mldivide(intToLoc(rc.readBroadcast(usingChannel+2)),rc.readBroadcast(usingChannel)+2);
		
		rc.setIndicatorString(0, ""+locToInt(averagePositionOfSwarm));
		
		//movement
//		Direction chosenDirection = allDirections[(int)(randall.nextDouble()*8)];
//		if(rc.isActive()&&rc.canMove(chosenDirection)){
//			rc.move(chosenDirection);
//		}
		swarmMove(averagePositionOfSwarm);
	}
	
	private static void swarmMove(MapLocation averagePositionOfSwarm) throws GameActionException{
		Direction chosenDirection = rc.getLocation().directionTo(averagePositionOfSwarm);
		if(rc.isActive()){
			if(randall.nextDouble()< 0.1){//go to swarm center
				for(int directionalOffset:directionalLooks){
					int forwardInt = chosenDirection.ordinal();
					Direction trialDir = allDirections[(forwardInt+directionalOffset+8)%8];
					if (trialDir != Direction.NONE && trialDir != Direction.OMNI){
						if(rc.canMove(trialDir)){
							rc.move(trialDir);
							break;
						}
					}
				}
			}else{//go towards enemy hq
				Direction enemyHQ = rc.getLocation().directionTo(rc.senseEnemyHQLocation());
				if (enemyHQ != Direction.NONE && enemyHQ!= Direction.OMNI){
					if(rc.canMove(enemyHQ)){
						rc.move(enemyHQ);
					} 
				}
			}
		}
	}
	

	private static MapLocation mladd(MapLocation m1, MapLocation m2){
		return new MapLocation(m1.x+m2.x,m1.y+m2.y);
	}
	
	private static MapLocation mlsub(MapLocation m1, MapLocation m2){
		return new MapLocation(m1.x-m2.x , m1.y-m2.y);
	}
	
	private static MapLocation mldivide(MapLocation bigM, int divisor){
		return new MapLocation(bigM.x/divisor, bigM.y/divisor);
	}

	private static int locToInt(MapLocation m){
		return (m.x*100 + m.y);
	}
	
	private static MapLocation intToLoc(int i){
		return new MapLocation(i/100,i%100);
	}
	
	private static void tryToShoot() throws GameActionException {
		//shooting
		Robot[] enemyRobots = rc.senseNearbyGameObjects(Robot.class,35,rc.getTeam().opponent());
		
		if(enemyRobots.length>0){//if there are enemies
			spawn = false;
			for (Robot anEnemy : enemyRobots) {
				  RobotInfo anEnemyInfo = rc.senseRobotInfo(anEnemy);
				  if (rc.canAttackSquare(anEnemyInfo.location) && anEnemyInfo.type != RobotType.HQ){
				    if (rc.isActive()) {
				      rc.attackSquare(anEnemyInfo.location);
				      spawn = true;
				      break;
				    }
				  }
				}
		}
	}
	
	private static void buildPASTR() throws GameActionException {
		
		if( rc.sensePastrLocations(rc.getTeam()).length<5 && rc.senseCowsAtLocation(rc.getLocation()) >100) {
			if( rc.isActive()){
				rc.construct(RobotType.PASTR);
			}
		}
	}

	private static void runHeadquarters() throws GameActionException {
		Direction spawnDir = allDirections[randall.nextInt(8)];
		tryToShoot();
			if(spawn && rc.canMove(spawnDir)&&rc.senseRobotCount()<GameConstants.MAX_ROBOTS){
				if (rc.isActive()) {
					rc.spawn(spawnDir);
				}
			}	
		int editingChannel = (Clock.getRoundNum()%2);
		int usingChannel = ((Clock.getRoundNum()+1)%2);
		rc.broadcast(editingChannel, 0);
		rc.broadcast(editingChannel+2, 0);
	}
}
